{
  "compiler": {
    "version": "0.8.22+commit.4fc1097e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "initialSupply",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "CannotWatchForContract"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "ContractEmergencyPaused"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "DailyRewardLimitExceeded"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "allowance",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "needed",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "ERC20InsufficientAllowance"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "balance",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "needed",
            "type": "uint256"
          }
        ],
        "type": "error",
        "name": "ERC20InsufficientBalance"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "approver",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC20InvalidApprover"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "receiver",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC20InvalidReceiver"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "sender",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC20InvalidSender"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "ERC20InvalidSpender"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InsufficientBalanceForBurn"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InsufficientTokensForReward"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidBurnAmount"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidBurnerAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidViewerAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "MaxDailyRewardTooLow"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "MustWaitBetweenAds"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "OnlyAuthorizedBurner"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableInvalidOwner"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableUnauthorizedAccount"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "RewardTooLow"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "TransferNotAllowed"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "viewer",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "reward",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "AdWatched",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "spender",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Approval",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "by",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "EmergencyPaused",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "by",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "EmergencyResumed",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "oldMax",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "newMax",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "MaxDailyRewardUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newReward",
            "type": "uint256",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "RewardUpdated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Transfer",
        "anonymous": false
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "adReward",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "allowance",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "spender",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "approve",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "balanceOf",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "burn"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "burnForLottery"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "value",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "burnFrom"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "burner",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "burnFromAuthorized"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "dailyRewards",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "decimals",
        "outputs": [
          {
            "internalType": "uint8",
            "name": "",
            "type": "uint8"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "emergencyPause"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "emergencyPaused",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "emergencyResume"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "emergencyWithdraw"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getContractStats",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "totalSupplyAmount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalHolders",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalTransfers",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalBurns",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "adsWatchedCount",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "rewardsEarnedAmount",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "user",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getUserStats",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "lastWatch",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalWatched",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "totalEarned",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "dailyReward",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "lastReset",
            "type": "uint256"
          },
          {
            "internalType": "bool",
            "name": "canWatchNow",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "burner",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isAuthorizedBurner",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "isHolder",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "lastAdWatchTime",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "lastRewardReset",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "maxRewardPerDay",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "name",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "renounceOwnership"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newReward",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setAdReward"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "newMax",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setMaxDailyReward"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "symbol",
        "outputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "totalAdsWatched",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "totalAdsWatchedCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "totalBurnsCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "totalHoldersCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "totalRewardsEarned",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "totalRewardsEarnedAmount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "totalSupply",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "totalTransfersCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transfer",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "from",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "to",
            "type": "address"
          },
          {
            "internalType": "uint256",
            "name": "amount",
            "type": "uint256"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transferFrom",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transferOwnership"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "viewer",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "watchAd"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "allowance(address,address)": {
          "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
        },
        "approve(address,uint256)": {
          "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
        },
        "balanceOf(address)": {
          "details": "Returns the value of tokens owned by `account`."
        },
        "burn(uint256)": {
          "details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
        },
        "burnForLottery(address,uint256)": {
          "params": {
            "amount": "Amount to burn",
            "from": "Address to burn from"
          }
        },
        "burnFrom(address,uint256)": {
          "details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
        },
        "burnFromAuthorized(address,uint256)": {
          "params": {
            "amount": "Amount of utility tokens to burn",
            "burner": "Address authorized to burn utility tokens"
          }
        },
        "constructor": {
          "params": {
            "initialSupply": "Initial utility token supply"
          }
        },
        "decimals()": {
          "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
        },
        "emergencyWithdraw(address)": {
          "params": {
            "to": "Address to withdraw to"
          }
        },
        "getContractStats()": {
          "returns": {
            "adsWatchedCount": "Total ads watched",
            "rewardsEarnedAmount": "Total rewards earned",
            "totalBurns": "Total burns",
            "totalHolders": "Total holders",
            "totalSupplyAmount": "Total token supply",
            "totalTransfers": "Total transfers"
          }
        },
        "getUserStats(address)": {
          "params": {
            "user": "The user address"
          },
          "returns": {
            "canWatchNow": "Whether user can watch now",
            "dailyReward": "Daily reward amount in utility tokens",
            "lastReset": "Last reset timestamp",
            "lastWatch": "Last watch timestamp",
            "totalEarned": "Total utility tokens earned",
            "totalWatched": "Total ads watched"
          }
        },
        "isAuthorizedBurner(address)": {
          "params": {
            "burner": "Address to check"
          },
          "returns": {
            "_0": "bool Whether the address is authorized"
          }
        },
        "name()": {
          "details": "Returns the name of the token."
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "setAdReward(uint256)": {
          "params": {
            "newReward": "New reward amount in utility tokens"
          }
        },
        "setMaxDailyReward(uint256)": {
          "params": {
            "newMax": "New maximum daily reward amount in utility tokens"
          }
        },
        "symbol()": {
          "details": "Returns the symbol of the token, usually a shorter version of the name."
        },
        "totalSupply()": {
          "details": "Returns the value of tokens in existence."
        },
        "transfer(address,uint256)": {
          "params": {
            "amount": "Amount of utility tokens to transfer",
            "to": "Recipient address"
          },
          "returns": {
            "_0": "bool Success status"
          }
        },
        "transferFrom(address,address,uint256)": {
          "params": {
            "amount": "Amount of utility tokens to transfer",
            "from": "Sender address",
            "to": "Recipient address"
          },
          "returns": {
            "_0": "bool Success status"
          }
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        },
        "watchAd(address)": {
          "params": {
            "viewer": "Address of the viewer"
          }
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "adReward()": {
          "notice": "Amount of utility tokens given for watching an ad"
        },
        "burnForLottery(address,uint256)": {
          "notice": "Burn tokens for Ad Lottery"
        },
        "burnFromAuthorized(address,uint256)": {
          "notice": "Burn utility tokens from authorized burner"
        },
        "constructor": {
          "notice": "Constructor for the AdToken utility token contract"
        },
        "dailyRewards(address)": {
          "notice": "Mapping of user addresses to their daily rewards"
        },
        "emergencyPause()": {
          "notice": "Emergency pause the utility token contract"
        },
        "emergencyPaused()": {
          "notice": "Whether the contract is emergency paused"
        },
        "emergencyResume()": {
          "notice": "Emergency resume the utility token contract"
        },
        "emergencyWithdraw(address)": {
          "notice": "Emergency token withdrawal"
        },
        "getContractStats()": {
          "notice": "Get contract statistics"
        },
        "getUserStats(address)": {
          "notice": "Get user statistics for utility token usage"
        },
        "isAuthorizedBurner(address)": {
          "notice": "Check if address is authorized burner"
        },
        "isHolder(address)": {
          "notice": "Mapping to track if address is a holder"
        },
        "lastAdWatchTime(address)": {
          "notice": "Mapping of user addresses to their last ad watch time"
        },
        "lastRewardReset(address)": {
          "notice": "Mapping of user addresses to their last reward reset time"
        },
        "maxRewardPerDay()": {
          "notice": "Maximum daily reward limit in utility tokens"
        },
        "setAdReward(uint256)": {
          "notice": "Set ad reward amount in utility tokens"
        },
        "setMaxDailyReward(uint256)": {
          "notice": "Set maximum daily reward in utility tokens"
        },
        "totalAdsWatched(address)": {
          "notice": "Mapping of user addresses to their total ads watched"
        },
        "totalAdsWatchedCount()": {
          "notice": "Total number of ads watched"
        },
        "totalBurnsCount()": {
          "notice": "Total number of burns"
        },
        "totalHoldersCount()": {
          "notice": "Total number of holders"
        },
        "totalRewardsEarned(address)": {
          "notice": "Mapping of user addresses to their total rewards earned"
        },
        "totalRewardsEarnedAmount()": {
          "notice": "Total rewards earned"
        },
        "totalTransfersCount()": {
          "notice": "Total number of transfers"
        },
        "transfer(address,uint256)": {
          "notice": "Override transfer to add utility token specific logic"
        },
        "transferFrom(address,address,uint256)": {
          "notice": "Override transferFrom to add utility token specific logic"
        },
        "watchAd(address)": {
          "notice": "Watch an ad and receive utility tokens"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "contracts/modules/lottery/AdToken.sol": "AdToken"
    },
    "evmVersion": "shanghai",
    "libraries": {}
  },
  "sources": {
    "contracts/modules/lottery/AdToken.sol": {
      "keccak256": "0xd967886f2fdb318f7256d52572f734b1d1dc084c7322a0800313345008a67a4d",
      "urls": [
        "bzz-raw://fd59dbead382093a180ee896b52cf80fb9f79bd4957e6b39593e41de002df6b3",
        "dweb:/ipfs/QmNzWLm2nbZCjSgEnGx8tcWrDGjDjoKojfrbaE6PDTnqvr"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
      "urls": [
        "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
        "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
      "keccak256": "0x19fdfb0f3b89a230e7dbd1cf416f1a6b531a3ee5db4da483f946320fc74afc0e",
      "urls": [
        "bzz-raw://3490d794728f5bfecb46820431adaff71ba374141545ec20b650bb60353fac23",
        "dweb:/ipfs/QmPsfxjVpMcZbpE7BH93DzTpEaktESigEw4SmDzkXuJ4WR"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol": {
      "keccak256": "0x86b7b71a6aedefdad89b607378eeab1dcc5389b9ea7d17346d08af01d7190994",
      "urls": [
        "bzz-raw://1dc2db8d94a21eac8efe03adf574c419b08536409b416057a2b5b95cb772c43c",
        "dweb:/ipfs/QmZfqJCKVU1ScuX2A7s8WZdQEaikwJbDH5JBrBdKTUT4Gu"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
      "keccak256": "0x74ed01eb66b923d0d0cfe3be84604ac04b76482a55f9dd655e1ef4d367f95bc2",
      "urls": [
        "bzz-raw://5282825a626cfe924e504274b864a652b0023591fa66f06a067b25b51ba9b303",
        "dweb:/ipfs/QmeCfPykghhMc81VJTrHTC7sF6CRvaA1FXVq2pJhwYp1dV"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "keccak256": "0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073",
      "urls": [
        "bzz-raw://c345af1b0e7ea28d1216d6a04ab28f5534a5229b9edf9ca3cd0e84950ae58d26",
        "dweb:/ipfs/QmY63jtSrYpLRe8Gj1ep2vMDCKxGNNG3hnNVKBVnrs2nmA"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "keccak256": "0xd6fa4088198f04eef10c5bce8a2f4d60554b7ec4b987f684393c01bf79b94d9f",
      "urls": [
        "bzz-raw://f95ee0bbd4dd3ac730d066ba3e785ded4565e890dbec2fa7d3b9fe3bad9d0d6e",
        "dweb:/ipfs/QmSLr6bHkPFWT7ntj34jmwfyskpwo97T9jZUrk5sz3sdtR"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
      "urls": [
        "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
        "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}