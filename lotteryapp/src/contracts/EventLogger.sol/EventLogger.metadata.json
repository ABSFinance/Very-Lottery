{
  "compiler": {
    "version": "0.8.22+commit.4fc1097e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidAddress"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidData"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidEventType"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidMessage"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "LoggingDisabled"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableInvalidOwner"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableUnauthorizedAccount"
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "eventType",
            "type": "string",
            "indexed": true
          },
          {
            "internalType": "string",
            "name": "message",
            "type": "string",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "indexedAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "EventLogged",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "bool",
            "name": "enabled",
            "type": "bool",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "LoggingToggled",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "LogsCleared",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "clearLogs"
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "eventLogs",
        "outputs": [
          {
            "internalType": "string",
            "name": "eventType",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "message",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "indexedAddress",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "logIndex",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "eventTypeCounters",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getEventLogCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "eventType",
            "type": "string"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getEventTypeCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "count",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getRecentLogs",
        "outputs": [
          {
            "internalType": "struct EventLogger.EventLog[]",
            "name": "",
            "type": "tuple[]",
            "components": [
              {
                "internalType": "string",
                "name": "eventType",
                "type": "string"
              },
              {
                "internalType": "string",
                "name": "message",
                "type": "string"
              },
              {
                "internalType": "address",
                "name": "indexedAddress",
                "type": "address"
              },
              {
                "internalType": "bytes",
                "name": "data",
                "type": "bytes"
              },
              {
                "internalType": "uint256",
                "name": "timestamp",
                "type": "uint256"
              },
              {
                "internalType": "uint256",
                "name": "logIndex",
                "type": "uint256"
              }
            ]
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "isLoggingEnabled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "string",
            "name": "eventType",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "message",
            "type": "string"
          },
          {
            "internalType": "address",
            "name": "indexedAddress",
            "type": "address"
          },
          {
            "internalType": "bytes",
            "name": "data",
            "type": "bytes"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "logEvent"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "loggingEnabled",
        "outputs": [
          {
            "internalType": "bool",
            "name": "",
            "type": "bool"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "renounceOwnership"
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "toggleLogging"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transferOwnership"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "constructor": {
          "params": {
            "owner": "Owner of the contract"
          }
        },
        "getEventLogCount()": {
          "returns": {
            "_0": "Total number of event logs"
          }
        },
        "getEventTypeCount(string)": {
          "params": {
            "eventType": "Type of event"
          },
          "returns": {
            "_0": "Count of events for the specified type"
          }
        },
        "getRecentLogs(uint256)": {
          "params": {
            "count": "Number of recent logs to retrieve"
          },
          "returns": {
            "_0": "Array of recent event logs"
          }
        },
        "isLoggingEnabled()": {
          "returns": {
            "_0": "Whether logging is enabled"
          }
        },
        "logEvent(string,string,address,bytes)": {
          "params": {
            "data": "Additional data",
            "eventType": "Type of event",
            "indexedAddress": "Associated address",
            "message": "Event message"
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "clearLogs()": {
          "notice": "Clear all event logs"
        },
        "constructor": {
          "notice": "Constructor for the event logger"
        },
        "eventLogs(uint256)": {
          "notice": "Array of all event logs"
        },
        "eventTypeCounters(string)": {
          "notice": "Mapping of event types to their count"
        },
        "getEventLogCount()": {
          "notice": "Get total event log count"
        },
        "getEventTypeCount(string)": {
          "notice": "Get count of events by type"
        },
        "getRecentLogs(uint256)": {
          "notice": "Get recent event logs"
        },
        "isLoggingEnabled()": {
          "notice": "Check if logging is enabled"
        },
        "logEvent(string,string,address,bytes)": {
          "notice": "Log an event"
        },
        "loggingEnabled()": {
          "notice": "Whether logging is enabled"
        },
        "toggleLogging()": {
          "notice": "Toggle logging functionality"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "contracts/shared/utils/EventLogger.sol": "EventLogger"
    },
    "evmVersion": "shanghai",
    "libraries": {}
  },
  "sources": {
    "contracts/shared/interfaces/IEventLogger.sol": {
      "keccak256": "0x7ebdce3dbe66bfd2ac55165c066349ae1a6dda667ddb6e05c8c3148901e864c7",
      "urls": [
        "bzz-raw://344d2bd245e7f2015c8e0f13370a0fa54255c8a38f678a1f5b6e14f41f255b5f",
        "dweb:/ipfs/QmXeHTokEetAvoxVEU5rAL9e3Tvvr3mq1xP5dVLNMcPchK"
      ],
      "license": "MIT"
    },
    "contracts/shared/utils/EventLogger.sol": {
      "keccak256": "0x92dcbdd092c0579199afd6612654b6619b1e3ed66272f3d1f38908f97427d239",
      "urls": [
        "bzz-raw://ca40893c7ffbc7450de7ae963735562fc518bc0be4f3f80ae495b977209a7a05",
        "dweb:/ipfs/QmYJtujt8itLKz8RkkmBWZETQV6scMLYkmzuBFRa12N36Q"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
      "urls": [
        "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
        "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
      "urls": [
        "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
        "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}