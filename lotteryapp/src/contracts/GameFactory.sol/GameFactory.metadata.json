{
  "compiler": {
    "version": "0.8.22+commit.4fc1097e"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "GameAlreadyExists"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "GameNotFound"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidGameType"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "InvalidInitialization"
      },
      {
        "inputs": [],
        "type": "error",
        "name": "NotInitializing"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableInvalidOwner"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "account",
            "type": "address"
          }
        ],
        "type": "error",
        "name": "OwnableUnauthorizedAccount"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "gameAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "enum GameFactory.GameType",
            "name": "gameType",
            "type": "uint8",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "GameCreated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "gameAddress",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "uint256",
            "name": "timestamp",
            "type": "uint256",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "GameDeactivated",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint64",
            "name": "version",
            "type": "uint64",
            "indexed": false
          }
        ],
        "type": "event",
        "name": "Initialized",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "previousOwner",
            "type": "address",
            "indexed": true
          },
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address",
            "indexed": true
          }
        ],
        "type": "event",
        "name": "OwnershipTransferred",
        "anonymous": false
      },
      {
        "inputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "allGames",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "enum GameFactory.GameType",
            "name": "gameType",
            "type": "uint8"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "createGame",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "gameAddress",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "deactivateGame"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "fundsDistributor",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "games",
        "outputs": [
          {
            "internalType": "address",
            "name": "gameAddress",
            "type": "address"
          },
          {
            "internalType": "bool",
            "name": "isActive",
            "type": "bool"
          },
          {
            "internalType": "enum GameFactory.GameType",
            "name": "gameType",
            "type": "uint8"
          },
          {
            "internalType": "uint256",
            "name": "createdAt",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getActiveGames",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getAllGames",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "getGameCount",
        "outputs": [
          {
            "internalType": "uint256",
            "name": "",
            "type": "uint256"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "gameAddress",
            "type": "address"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getGameInfo",
        "outputs": [
          {
            "internalType": "struct GameFactory.GameInfo",
            "name": "",
            "type": "tuple",
            "components": [
              {
                "internalType": "address",
                "name": "gameAddress",
                "type": "address"
              },
              {
                "internalType": "bool",
                "name": "isActive",
                "type": "bool"
              },
              {
                "internalType": "enum GameFactory.GameType",
                "name": "gameType",
                "type": "uint8"
              },
              {
                "internalType": "uint256",
                "name": "createdAt",
                "type": "uint256"
              }
            ]
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "enum GameFactory.GameType",
            "name": "gameType",
            "type": "uint8"
          }
        ],
        "stateMutability": "view",
        "type": "function",
        "name": "getGamesByType",
        "outputs": [
          {
            "internalType": "address[]",
            "name": "",
            "type": "address[]"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "owner",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "ownableContract",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "statsContract",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "referralContract",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "distributor",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_oneDayImplementation",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_sevenDaysImplementation",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_registryContract",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "initialize"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "oneDayImplementation",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "ownable",
        "outputs": [
          {
            "internalType": "contract IOwnable",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "owner",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "referralSystem",
        "outputs": [
          {
            "internalType": "contract ICryptolottoReferral",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "registry",
        "outputs": [
          {
            "internalType": "contract ContractRegistry",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "renounceOwnership"
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "_oneDayImplementation",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "_sevenDaysImplementation",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "setImplementations"
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "sevenDaysImplementation",
        "outputs": [
          {
            "internalType": "address",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [],
        "stateMutability": "view",
        "type": "function",
        "name": "statsAggregator",
        "outputs": [
          {
            "internalType": "contract ICryptolottoStatsAggregator",
            "name": "",
            "type": "address"
          }
        ]
      },
      {
        "inputs": [
          {
            "internalType": "address",
            "name": "newOwner",
            "type": "address"
          }
        ],
        "stateMutability": "nonpayable",
        "type": "function",
        "name": "transferOwnership"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "constructor": {
          "details": "Disables initializers to prevent re-initialization"
        },
        "createGame(uint8)": {
          "params": {
            "gameType": "The type of game to create"
          },
          "returns": {
            "_0": "The address of the created game contract"
          }
        },
        "deactivateGame(address)": {
          "params": {
            "gameAddress": "The address of the game to deactivate"
          }
        },
        "getActiveGames()": {
          "returns": {
            "_0": "Array of active game addresses"
          }
        },
        "getAllGames()": {
          "returns": {
            "_0": "Array of all game addresses"
          }
        },
        "getGameCount()": {
          "returns": {
            "_0": "The total number of games"
          }
        },
        "getGameInfo(address)": {
          "params": {
            "gameAddress": "The address of the game"
          },
          "returns": {
            "_0": "GameInfo structure containing game details"
          }
        },
        "getGamesByType(uint8)": {
          "params": {
            "gameType": "The type of games to retrieve"
          },
          "returns": {
            "_0": "Array of game addresses of the specified type"
          }
        },
        "initialize(address,address,address,address,address,address,address,address)": {
          "params": {
            "_oneDayImplementation": "The 1-day game implementation address",
            "_registryContract": "The contract registry address",
            "_sevenDaysImplementation": "The 7-days game implementation address",
            "distributor": "The funds distributor contract address",
            "ownableContract": "The ownable contract address",
            "owner": "The owner of the factory contract",
            "referralContract": "The referral system contract address",
            "statsContract": "The stats aggregator contract address"
          }
        },
        "owner()": {
          "details": "Returns the address of the current owner."
        },
        "renounceOwnership()": {
          "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
        },
        "setImplementations(address,address)": {
          "params": {
            "_oneDayImplementation": "The 1-day game implementation address",
            "_sevenDaysImplementation": "The 7-days game implementation address"
          }
        },
        "transferOwnership(address)": {
          "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
        }
      },
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "allGames(uint256)": {
          "notice": "Array of all game addresses"
        },
        "constructor": {
          "notice": "Constructor for the GameFactory contract"
        },
        "createGame(uint8)": {
          "notice": "Create a new game"
        },
        "deactivateGame(address)": {
          "notice": "Deactivate a game"
        },
        "fundsDistributor()": {
          "notice": "Funds distributor contract instance"
        },
        "games(address)": {
          "notice": "Mapping of game addresses to their information"
        },
        "getActiveGames()": {
          "notice": "Get all active games"
        },
        "getAllGames()": {
          "notice": "Get all games"
        },
        "getGameCount()": {
          "notice": "Get game count"
        },
        "getGameInfo(address)": {
          "notice": "Get game info"
        },
        "getGamesByType(uint8)": {
          "notice": "Get games by type"
        },
        "initialize(address,address,address,address,address,address,address,address)": {
          "notice": "Initialize the factory contract"
        },
        "oneDayImplementation()": {
          "notice": "1-day game implementation address"
        },
        "ownable()": {
          "notice": "Ownable contract instance"
        },
        "referralSystem()": {
          "notice": "Referral system contract instance"
        },
        "registry()": {
          "notice": "Contract registry instance"
        },
        "setImplementations(address,address)": {
          "notice": "Set implementation addresses"
        },
        "sevenDaysImplementation()": {
          "notice": "7-days game implementation address"
        },
        "statsAggregator()": {
          "notice": "Stats aggregator contract instance"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "remappings": [
      "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
      "@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/",
      "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
      "forge-std/=lib/forge-std/src/",
      "halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/",
      "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
      "openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ],
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "compilationTarget": {
      "contracts/deployment/factories/GameFactory.sol": "GameFactory"
    },
    "evmVersion": "shanghai",
    "libraries": {}
  },
  "sources": {
    "contracts/deployment/factories/GameFactory.sol": {
      "keccak256": "0x92d0e80da80a8c4715c1180dbb58f8c757cfff47550b4be903701e0cf4db0ff9",
      "urls": [
        "bzz-raw://69a4139042e7b6e50c2cf34bc6338a40969e285b53b6b509b02b2363bd132c12",
        "dweb:/ipfs/QmZu45zkbPwgBk43xn2dAinxD55tzhe9qhGXxXdrJt7vwb"
      ],
      "license": "MIT"
    },
    "contracts/shared/interfaces/ICryptolottoReferral.sol": {
      "keccak256": "0x25aa6cce01d71e204003776761a6b79a80e3000bdd2bd67b3bd1a6dda1f59c4d",
      "urls": [
        "bzz-raw://ac8a8bd0ef9d6d40fa255a116ef60e19e1c4a8b00334a210b7f44552b14c57ae",
        "dweb:/ipfs/Qmap68yMy5GkwDMEz3TXcGD67CxwTCHcsCSGqTkf2cqopt"
      ],
      "license": "MIT"
    },
    "contracts/shared/interfaces/ICryptolottoStatsAggregator.sol": {
      "keccak256": "0x3949cc1e620873a9f982f6341f44c755dadb82a901d767f35bbb4041d1840b6d",
      "urls": [
        "bzz-raw://513972ba589d9962757ff7476d11d08c42bba0f24a0aa76bc69967827bd4b2b9",
        "dweb:/ipfs/QmZzaghvH2v8eB23wkosE6M6JkpyA25TnZPyRHFauEFjWm"
      ],
      "license": "MIT"
    },
    "contracts/shared/interfaces/IOwnable.sol": {
      "keccak256": "0x7435e3e66069c024ef2b6696301352ad17a2fa616c6dbce308af0c7951332282",
      "urls": [
        "bzz-raw://cfa7e7aa1b5097f57b8c3d8c133166e86e157ff08f9e732fb2324c76419aa7ef",
        "dweb:/ipfs/Qmf8rHUh2HNMxCrhQpsMpfQhQTkmUU8m1UVYaoZava59AY"
      ],
      "license": "MIT"
    },
    "contracts/shared/utils/ContractRegistry.sol": {
      "keccak256": "0x2679c9a642ec49f4fe5b99b39742e5ad8269c25faecd59108390b6d57c04747c",
      "urls": [
        "bzz-raw://9f3e30115f43c1d84aff8cab6687c65354aa8019c546f82a6e41dda030f727c5",
        "dweb:/ipfs/QmQELtKrCywNhwKPaD2rpgM1f35f1iKzM6FomYNGmH9E6H"
      ],
      "license": "MIT"
    },
    "contracts/shared/utils/GasOptimizer.sol": {
      "keccak256": "0x1b6870383897803ddf57896964421ad4a582bdc62d25701d5d1c6d15f8627f13",
      "urls": [
        "bzz-raw://5addeff7a3df26ee300968fb4b1b19c0f127a8335095ea055264a70aa706795b",
        "dweb:/ipfs/QmZXprNbgDiBkJxPgF3nZM3G7Ev2bHkzX2jfBtiWUjynBF"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol": {
      "keccak256": "0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a",
      "urls": [
        "bzz-raw://9706d43a0124053d9880f6e31a59f31bc0a6a3dc1acd66ce0a16e1111658c5f6",
        "dweb:/ipfs/QmUFmfowzkRwGtDu36cXV9SPTBHJ3n7dG9xQiK5B28jTf2"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
      "keccak256": "0xdb4d24ee2c087c391d587cd17adfe5b3f9d93b3110b1388c2ab6c7c0ad1dcd05",
      "urls": [
        "bzz-raw://ab7b6d5b9e2b88176312967fe0f0e78f3d9a1422fa5e4b64e2440c35869b5d08",
        "dweb:/ipfs/QmXKYWWyzcLg1B2k7Sb1qkEXgLCYfXecR9wYW5obRzWP1Q"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
      "keccak256": "0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397",
      "urls": [
        "bzz-raw://08e39f23d5b4692f9a40803e53a8156b72b4c1f9902a88cd65ba964db103dab9",
        "dweb:/ipfs/QmPKn6EYDgpga7KtpkA8wV2yJCYGMtc9K4LkJfhKX2RVSV"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/access/Ownable.sol": {
      "keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
      "urls": [
        "bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
        "dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
      "keccak256": "0xbf2aefe54b76d7f7bcd4f6da1080b7b1662611937d870b880db584d09cea56b5",
      "urls": [
        "bzz-raw://f5e7e2f12e0feec75296e57f51f82fdaa8bd1551f4b8cc6560442c0bf60f818c",
        "dweb:/ipfs/QmcW9wDMaQ8RbQibMarfp17a3bABzY5KraWe2YDwuUrUoz"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
      "keccak256": "0xa3066ff86b94128a9d3956a63a0511fa1aae41bd455772ab587b32ff322acb2e",
      "urls": [
        "bzz-raw://bf7b192fd82acf6187970c80548f624b1b9c80425b62fa49e7fdb538a52de049",
        "dweb:/ipfs/QmWXG1YCde1tqDYTbNwjkZDWVgPEjzaQGSDqWkyKLzaNua"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol": {
      "keccak256": "0xa1ad192cd45317c788618bef5cb1fb3ca4ce8b230f6433ac68cc1d850fb81618",
      "urls": [
        "bzz-raw://b43447bb85a53679d269a403c693b9d88d6c74177dfb35eddca63abaf7cf110a",
        "dweb:/ipfs/QmXSDmpd4bNZj1PDgegr6C4w1jDaWHXCconC3rYiw9TSkQ"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
      "keccak256": "0xc3f2ec76a3de8ed7a7007c46166f5550c72c7709e3fc7e8bb3111a7191cdedbd",
      "urls": [
        "bzz-raw://e73efb4c2ca655882dc237c6b4f234a9bd36d97159d8fcaa837eb01171f726ac",
        "dweb:/ipfs/QmTNnnv7Gu5fs5G1ZMh7Fexp8N4XUs3XrNAngjcxgiss3e"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
      "keccak256": "0x20462ddb2665e9521372c76b001d0ce196e59dbbd989de9af5576cad0bd5628b",
      "urls": [
        "bzz-raw://f417fd12aeec8fbfaceaa30e3a08a0724c0bc39de363e2acf6773c897abbaf6d",
        "dweb:/ipfs/QmU4Hko6sApdweVM92CsiuLKkCk8HfyBeutF89PCTz5Tye"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
      "keccak256": "0x6d0ae6e206645341fd122d278c2cb643dea260c190531f2f3f6a0426e77b00c0",
      "urls": [
        "bzz-raw://032d1201d839435be2c85b72e33206b3ea980c569d6ebf7fa57d811ab580a82f",
        "dweb:/ipfs/QmeqQjAtMvdZT2tG7zm39itcRJkuwu8AEReK6WRnLJ18DD"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Context.sol": {
      "keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
      "urls": [
        "bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
        "dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/Errors.sol": {
      "keccak256": "0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123",
      "urls": [
        "bzz-raw://ba1d02f4847670a1b83dec9f7d37f0b0418d6043447b69f3a29a5f9efc547fcf",
        "dweb:/ipfs/QmQ7iH2keLNUKgq2xSWcRmuBE5eZ3F5whYAkAGzCNNoEWB"
      ],
      "license": "MIT"
    },
    "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
      "keccak256": "0xcf74f855663ce2ae00ed8352666b7935f6cddea2932fdf2c3ecd30a9b1cd0e97",
      "urls": [
        "bzz-raw://9f660b1f351b757dfe01438e59888f31f33ded3afcf5cb5b0d9bf9aa6f320a8b",
        "dweb:/ipfs/QmarDJ5hZEgBtCmmrVzEZWjub9769eD686jmzb2XpSU1cM"
      ],
      "license": "MIT"
    }
  },
  "version": 1
}