{
  "address": "0xfc77b24b870229511d4b54628de1af961E51f7A6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_link",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lotteryData",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "alreadyEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "invalidFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "invalidValue",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryEnded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "lotteryNotActive",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "onlyLotteryManagerAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "playersNotFound",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "LotteryCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NewLotteryPlayer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "RandomnessRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "WinnerDeclared",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "enterLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllLotteryIds",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "getLotteryDetails",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_p",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_a",
          "type": "address"
        }
      ],
      "name": "isPresent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lotteryManager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_lotteryId",
          "type": "uint256"
        }
      ],
      "name": "pickWinner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startLottery",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllowedPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3786519c6447ae29bbe6054289d6d9e50bb4b3d7f762f9b52bc8ea8a80fae09",
  "receipt": {
    "to": null,
    "from": "0xC4975C18C83C39D46bf58Afb16667c51611A0789",
    "contractAddress": "0xfc77b24b870229511d4b54628de1af961E51f7A6",
    "transactionIndex": 4,
    "gasUsed": "1883638",
    "logsBloom": "0x
    "blockHash": "0xcd191f3f962a8e0d580e1c5d62bfbcbc4894fe87dbb09c061c46be00e830f03d",
    "transactionHash": "0xd3786519c6447ae29bbe6054289d6d9e50bb4b3d7f762f9b52bc8ea8a80fae09",
    "logs": [],
    "blockNumber": 10398558,
    "cumulativeGasUsed": "2152803",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "460",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0x01BE23585060835E02B77ef475b0Cc51aA1e0709",
    "0x0161e5782C1272a82A7f3d101446F01d3283BFbB"
  ],
  "numDeployments": 1,
  "solcInputHash": "033cbaa06861e810303b377c8b26c3ba",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_link\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lotteryData\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"alreadyEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"invalidValue\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryEnded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"lotteryNotActive\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"onlyLotteryManagerAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"playersNotFound\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"LotteryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NewLotteryPlayer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"RandomnessRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"WinnerDeclared\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"enterLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllLotteryIds\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"getLotteryDetails\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_p\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_a\",\"type\":\"address\"}],\"name\":\"isPresent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lotteryManager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_lotteryId\",\"type\":\"uint256\"}],\"name\":\"pickWinner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startLottery\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllowedPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2f576be637946f767aa56601c26d717f48a0aff44f82e46f13807eea1009a21\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"./LotteryData.sol\\\";\\n\\ncontract Lottery is VRFConsumerBaseV2{\\n    VRFCoordinatorV2Interface COORDINATOR;\\n    LinkTokenInterface LINKTOKEN;\\n    LotteryData LOTTERY_DATA;\\n\\n    using Counters for Counters.Counter;\\n\\n    using SafeMath for uint256;\\n\\n    Counters.Counter private lotteryId;\\n\\n    uint public totalAllowedPlayers = 5;\\n\\n    address public lotteryManager;\\n\\n    mapping(uint256 => uint256) private lotteryRandomnessRequest;\\n    bytes32 private keyHash;\\n    uint64 immutable s_subscriptionId;\\n    uint16 immutable requestConfirmations = 3;\\n    uint32 immutable callbackGasLimit = 100000;\\n    uint256 public s_requestId;\\n\\n    event RandomnessRequested(uint256,uint256);\\n    \\n    //To emit data which will contain the requestId-from chainlink vrf, lotteryId, winnder address\\n    event WinnerDeclared(uint256 ,uint256,address);\\n\\n    //To emit data which will contain the lotteryId, address of new-player & new Price Pool\\n    event NewLotteryPlayer(uint256, address, uint256);\\n\\n    //To emit data which will contain the id of newly created lottery\\n    event LotteryCreated(uint256);\\n\\n\\n    //custom Errors\\n    error invalidValue();\\n    error invalidFee();\\n    error lotteryNotActive();\\n    error lotteryFull();\\n    error alreadyEntered();\\n    error lotteryEnded();\\n    error playersNotFound();\\n    error onlyLotteryManagerAllowed();\\n\\n     constructor(\\n        bytes32 _keyHash,\\n        uint64 subscriptionId, \\n        address _vrfCoordinator, \\n        address _link,\\n        address _lotteryData\\n        ) VRFConsumerBaseV2(_vrfCoordinator){\\n        lotteryId.increment();   \\n        lotteryManager = msg.sender;\\n        COORDINATOR = VRFCoordinatorV2Interface(_vrfCoordinator);\\n        LINKTOKEN = LinkTokenInterface(_link);\\n        s_subscriptionId = subscriptionId;\\n        keyHash = _keyHash;\\n        LOTTERY_DATA = LotteryData(_lotteryData);\\n    }\\n\\n    modifier onlyLotteryManager {\\n        if(msg.sender != lotteryManager) revert onlyLotteryManagerAllowed();\\n        _;\\n    }\\n\\n    function getAllLotteryIds() public view returns(uint256[] memory){\\n        return LOTTERY_DATA.getAllLotteryIds();\\n    }\\n\\n    function startLottery() public payable onlyLotteryManager {\\n        LOTTERY_DATA.addLotteryData(lotteryId.current());\\n        lotteryId.increment();\\n        emit LotteryCreated(lotteryId.current());\\n    }\\n\\n    function isPresent(address[] memory _p, address _a) public pure returns (bool){\\n        for (uint i=0; i < _p.length; i++) {\\n            if(_p[i] == _a) {\\n                return true;\\n            }\\n        }\\n        return false;\\n    }\\n\\n    function enterLottery(uint256 _lotteryId) public payable {\\n        (uint256 lId, \\n        uint256 ticketPrice, \\n        uint256 prizePool, \\n        address[] memory players, \\n        address winner, \\n        bool isFinished) = LOTTERY_DATA.getLottery(_lotteryId);\\n        if(isPresent(players, msg.sender)) revert alreadyEntered();\\n        if(isFinished) revert lotteryNotActive();\\n        if(players.length >= totalAllowedPlayers) revert lotteryFull();\\n        if(msg.value < ticketPrice) revert invalidFee();\\n        uint256  updatedPricePool = prizePool + msg.value;\\n        LOTTERY_DATA.addPlayerToLottery(_lotteryId, updatedPricePool, msg.sender);\\n        emit NewLotteryPlayer(_lotteryId, msg.sender, updatedPricePool);\\n    }\\n\\n    function pickWinner(uint256 _lotteryId) public onlyLotteryManager {\\n\\n        if(LOTTERY_DATA.isLotteryFinished(_lotteryId)) revert lotteryEnded();\\n\\n        address[] memory p = LOTTERY_DATA.getLotteryPlayers(_lotteryId);\\n        if(p.length == 1) {\\n            if(p[0] == address(0)) revert playersNotFound();\\n            //require(p[0] != address(0), \\\"no_players_found\\\");\\n            LOTTERY_DATA.setWinnerForLottery(_lotteryId, 0);\\n            payable(p[0]).transfer(address(this).balance);\\n            emit WinnerDeclared(0,_lotteryId,p[0]);\\n        } else {\\n            //LINK is from VRFConsumerBase\\n            s_requestId = COORDINATOR.requestRandomWords(\\n                keyHash,\\n                s_subscriptionId,\\n                requestConfirmations,\\n                callbackGasLimit,\\n                1 // number of random numbers\\n            );\\n            lotteryRandomnessRequest[s_requestId] = _lotteryId;\\n            emit RandomnessRequested(s_requestId,_lotteryId);\\n        }\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomness) internal override {\\n        uint256 _lotteryId = lotteryRandomnessRequest[requestId];\\n        address[] memory allPlayers = LOTTERY_DATA.getLotteryPlayers(_lotteryId);\\n        uint256 winnerIndex = randomness[0].mod(allPlayers.length);\\n        LOTTERY_DATA.setWinnerForLottery(_lotteryId, winnerIndex);\\n        delete lotteryRandomnessRequest[requestId];\\n        payable(allPlayers[winnerIndex]).transfer(address(this).balance);\\n        emit WinnerDeclared(requestId,_lotteryId,allPlayers[winnerIndex]);\\n    }\\n\\n    function getLotteryDetails(uint256 _lotteryId) public view returns(\\n        uint256,\\n        uint256,\\n        uint256 ,\\n        address[] memory,\\n        address ,\\n        bool\\n        ){\\n            return LOTTERY_DATA.getLottery(_lotteryId);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x9d8e883ed4823152ab475f8cc4ccc5a0726fb3fb1836634055adce345533b60d\",\"license\":\"MIT\"},\"contracts/LotteryData.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.11;\\n\\n\\ncontract LotteryData {\\n\\n    struct LotteryInfo{\\n        uint256 lotteryId;\\n        uint256 ticketPrice;\\n        uint256 prizePool;\\n        address[] players;\\n        address winner;\\n        bool isFinished;\\n    }\\n    mapping(uint256 => LotteryInfo) public lotteries;\\n\\n    uint256[] public allLotteries;\\n\\n    uint public lotteryTicketPrice = 0.5 ether;\\n\\n    address private manager;\\n    bool private isLotteryContractSet;\\n    address private lotteryContract;\\n    constructor(){\\n        manager = msg.sender;\\n    }\\n\\n    error lotteryNotFound();\\n    error onlyLotteryManagerAllowed();\\n    error actionNotAllowed();\\n\\n    modifier onlyManager(){\\n        if(msg.sender != manager) revert onlyLotteryManagerAllowed();\\n        _;\\n    }\\n\\n    modifier onlyLoterryContract(){\\n        if(!isLotteryContractSet) revert actionNotAllowed();\\n        if(msg.sender != lotteryContract) revert onlyLotteryManagerAllowed();\\n        _;\\n    }\\n\\n    function updateLotteryContract(address _lotteryContract) external onlyManager{\\n        isLotteryContractSet = true;\\n        lotteryContract = _lotteryContract;\\n    }\\n\\n    function getAllLotteryIds() external view returns(uint256[] memory){\\n        return allLotteries;\\n    }\\n\\n\\n    function addLotteryData(uint256 _lotteryId) external onlyLoterryContract{\\n        LotteryInfo memory lottery = LotteryInfo({\\n            lotteryId: _lotteryId,\\n            ticketPrice: lotteryTicketPrice,\\n            prizePool: 0,\\n            players: new address[](0),\\n            winner: address(0),\\n            isFinished: false\\n        });\\n        lotteries[_lotteryId] = lottery;\\n        allLotteries.push(_lotteryId);\\n    }\\n\\n    function addPlayerToLottery(uint256 _lotteryId, uint256 _updatedPricePool, address _player) external onlyLoterryContract{\\n        LotteryInfo storage lottery = lotteries[_lotteryId];\\n        if(lottery.lotteryId == 0){\\n            revert lotteryNotFound();\\n        }\\n        lottery.players.push(_player);\\n        lottery.prizePool = _updatedPricePool;\\n    }\\n\\n\\n    function getLotteryPlayers(uint256 _lotteryId) public view returns(address[] memory) {\\n        LotteryInfo memory tmpLottery = lotteries[_lotteryId];\\n        if(tmpLottery.lotteryId == 0){\\n            revert lotteryNotFound();\\n        }\\n        return tmpLottery.players;\\n    }\\n\\n    function isLotteryFinished(uint256 _lotteryId) public view returns(bool){\\n        LotteryInfo memory tmpLottery = lotteries[_lotteryId];\\n         if(tmpLottery.lotteryId == 0){\\n            revert lotteryNotFound();\\n        }\\n        return tmpLottery.isFinished;\\n    }\\n\\n    function getLotteryPlayerLength(uint256 _lotteryId) public view returns(uint256){\\n        LotteryInfo memory tmpLottery = lotteries[_lotteryId];\\n         if(tmpLottery.lotteryId == 0){\\n            revert lotteryNotFound();\\n        }\\n        return tmpLottery.players.length;\\n    }\\n\\n    function getLottery(uint256 _lotteryId) external view returns(\\n        uint256,\\n        uint256,\\n        uint256 ,\\n        address[] memory,\\n        address ,\\n        bool\\n        ){\\n            LotteryInfo memory tmpLottery = lotteries[_lotteryId];\\n            if(tmpLottery.lotteryId == 0){\\n                revert lotteryNotFound();\\n            }\\n            return (\\n                tmpLottery.lotteryId,\\n                tmpLottery.ticketPrice,\\n                tmpLottery.prizePool,\\n                tmpLottery.players,\\n                tmpLottery.winner,\\n                tmpLottery.isFinished\\n            );\\n    }\\n\\n    function setWinnerForLottery(uint256 _lotteryId, uint256 _winnerIndex) external onlyLoterryContract {\\n        LotteryInfo storage lottery = lotteries[_lotteryId];\\n        if(lottery.lotteryId == 0){\\n            revert lotteryNotFound();\\n        }\\n        lottery.isFinished = true;\\n        lottery.winner = lottery.players[_winnerIndex];\\n    }\\n}\",\"keccak256\":\"0x80deaabdc93d1739655f1984e1a1749adf304113d8ad48022ead3736b70450f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100915760003560e01c80634f989520116100595780634f989520146101525780636cc699971461017d578063e00ccfbc146101a8578063e89e106a146101e5578063f737d21d1461021057610091565b806306b0e34414610096578063160344e2146100c15780631fe543e3146100cb5780633677bc07146100f45780633fd4309814610136575b600080fd5b3480156100a257600080fd5b506100ab610239565b6040516100b891906110ea565b60405180910390f35b6100c961023f565b005b3480156100d757600080fd5b506100f260048036038101906100ed919061129e565b6103a8565b005b34801561010057600080fd5b5061011b600480360381019061011691906112fa565b610468565b60405161012d96959493929190611441565b60405180910390f35b610150600480360381019061014b91906112fa565b610528565b005b34801561015e57600080fd5b506101676107b3565b60405161017491906114a9565b60405180910390f35b34801561018957600080fd5b506101926107d9565b60405161019f9190611582565b60405180910390f35b3480156101b457600080fd5b506101cf60048036038101906101ca9190611693565b610876565b6040516101dc91906116ef565b60405180910390f35b3480156101f157600080fd5b506101fa6108fe565b60405161020791906110ea565b60405180910390f35b34801561021c57600080fd5b50610237600480360381019061023291906112fa565b610904565b005b60045481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146102c6576040517f4150155300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed424b4361030e6003610e5a565b6040518263ffffffff1660e01b815260040161032a91906110ea565b600060405180830381600087803b15801561034457600080fd5b505af1158015610358573d6000803e3d6000fd5b505050506103666003610e44565b7f9e0023bebcc752baaa41057318405b5a6a8e9c6372b519717cfdf238e5caa7956103916003610e5a565b60405161039e91906110ea565b60405180910390a1565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461045a57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161045192919061170a565b60405180910390fd5b6104648282610e68565b5050565b60008060006060600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392e845f6886040518263ffffffff1660e01b81526004016104cd91906110ea565b600060405180830381865afa1580156104ea573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105139190611820565b95509550955095509550955091939550919395565b600080600080600080600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166392e845f6886040518263ffffffff1660e01b815260040161058c91906110ea565b600060405180830381865afa1580156105a9573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906105d29190611820565b9550955095509550955095506105e88333610876565b1561061f576040517f1db2468b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8015610657576040517fc89f1e0800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600454835110610693576040517f8d671d0d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b843410156106cd576040517f3c1d3de600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600034856106db91906118f8565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ef037c338983336040518463ffffffff1660e01b815260040161073c9392919061194e565b600060405180830381600087803b15801561075657600080fd5b505af115801561076a573d6000803e3d6000fd5b505050507f5dac43247c7247837bb97f4140d16d266918ddaa501aa7780cb7f1a9009a72c68833836040516107a193929190611985565b60405180910390a15050505050505050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6060600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636cc699976040518163ffffffff1660e01b8152600401600060405180830381865afa158015610848573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f820116820180604052508101906108719190611a53565b905090565b600080600090505b83518110156108f2578273ffffffffffffffffffffffffffffffffffffffff168482815181106108b1576108b0611a9c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156108df5760019150506108f8565b80806108ea90611acb565b91505061087e565b50600090505b92915050565b60085481565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461098b576040517f4150155300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cc251829826040518263ffffffff1660e01b81526004016109e691906110ea565b602060405180830381865afa158015610a03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a279190611b14565b15610a5e576040517f586abc5a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a646daf6836040518263ffffffff1660e01b8152600401610abb91906110ea565b600060405180830381865afa158015610ad8573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610b019190611b41565b9050600181511415610cdd57600073ffffffffffffffffffffffffffffffffffffffff1681600081518110610b3957610b38611a9c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff161415610b8f576040517f6abe6f6b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5676fd88360006040518363ffffffff1660e01b8152600401610bed929190611bcf565b600060405180830381600087803b158015610c0757600080fd5b505af1158015610c1b573d6000803e3d6000fd5b5050505080600081518110610c3357610c32611a9c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610c80573d6000803e3d6000fd5b507f8981fdd74bd05da9ef8f2aeb472f541ee871b1e9e3908c19d01a9bf51ce5f7ab60008383600081518110610cb957610cb8611a9c565b5b6020026020010151604051610cd093929190611bf8565b60405180910390a1610e40565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635d3b1d306007547f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b8152600401610da1959493929190611ce2565b6020604051808303816000875af1158015610dc0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de49190611d35565b60088190555081600660006008548152602001908152602001600020819055507f3d94fecedaa4f90b8bd459797adb95f5bb11426025c5541390d9ccc1ad1b60a160085483604051610e37929190611d62565b60405180910390a15b5050565b6001816000016000828254019250508190555050565b600081600001549050919050565b6000600660008481526020019081526020016000205490506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a646daf6836040518263ffffffff1660e01b8152600401610edd91906110ea565b600060405180830381865afa158015610efa573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610f239190611b41565b90506000610f56825185600081518110610f4057610f3f611a9c565b5b60200260200101516110bb90919063ffffffff16565b9050600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a5676fd884836040518363ffffffff1660e01b8152600401610fb5929190611d62565b600060405180830381600087803b158015610fcf57600080fd5b505af1158015610fe3573d6000803e3d6000fd5b50505050600660008681526020019081526020016000206000905581818151811061101157611010611a9c565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561105e573d6000803e3d6000fd5b507f8981fdd74bd05da9ef8f2aeb472f541ee871b1e9e3908c19d01a9bf51ce5f7ab858484848151811061109557611094611a9c565b5b60200260200101516040516110ac9392919061194e565b60405180910390a15050505050565b600081836110c99190611dba565b905092915050565b6000819050919050565b6110e4816110d1565b82525050565b60006020820190506110ff60008301846110db565b92915050565b6000604051905090565b600080fd5b600080fd5b611122816110d1565b811461112d57600080fd5b50565b60008135905061113f81611119565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6111938261114a565b810181811067ffffffffffffffff821117156111b2576111b161115b565b5b80604052505050565b60006111c5611105565b90506111d1828261118a565b919050565b600067ffffffffffffffff8211156111f1576111f061115b565b5b602082029050602081019050919050565b600080fd5b600061121a611215846111d6565b6111bb565b9050808382526020820190506020840283018581111561123d5761123c611202565b5b835b8181101561126657806112528882611130565b84526020840193505060208101905061123f565b5050509392505050565b600082601f83011261128557611284611145565b5b8135611295848260208601611207565b91505092915050565b600080604083850312156112b5576112b461110f565b5b60006112c385828601611130565b925050602083013567ffffffffffffffff8111156112e4576112e3611114565b5b6112f085828601611270565b9150509250929050565b6000602082840312156113105761130f61110f565b5b600061131e84828501611130565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061137e82611353565b9050919050565b61138e81611373565b82525050565b60006113a08383611385565b60208301905092915050565b6000602082019050919050565b60006113c482611327565b6113ce8185611332565b93506113d983611343565b8060005b8381101561140a5781516113f18882611394565b97506113fc836113ac565b9250506001810190506113dd565b5085935050505092915050565b61142081611373565b82525050565b60008115159050919050565b61143b81611426565b82525050565b600060c08201905061145660008301896110db565b61146360208301886110db565b61147060408301876110db565b818103606083015261148281866113b9565b90506114916080830185611417565b61149e60a0830184611432565b979650505050505050565b60006020820190506114be6000830184611417565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6114f9816110d1565b82525050565b600061150b83836114f0565b60208301905092915050565b6000602082019050919050565b600061152f826114c4565b61153981856114cf565b9350611544836114e0565b8060005b8381101561157557815161155c88826114ff565b975061156783611517565b925050600181019050611548565b5085935050505092915050565b6000602082019050818103600083015261159c8184611524565b905092915050565b600067ffffffffffffffff8211156115bf576115be61115b565b5b602082029050602081019050919050565b6115d981611373565b81146115e457600080fd5b50565b6000813590506115f6816115d0565b92915050565b600061160f61160a846115a4565b6111bb565b9050808382526020820190506020840283018581111561163257611631611202565b5b835b8181101561165b578061164788826115e7565b845260208401935050602081019050611634565b5050509392505050565b600082601f83011261167a57611679611145565b5b813561168a8482602086016115fc565b91505092915050565b600080604083850312156116aa576116a961110f565b5b600083013567ffffffffffffffff8111156116c8576116c7611114565b5b6116d485828601611665565b92505060206116e5858286016115e7565b9150509250929050565b60006020820190506117046000830184611432565b92915050565b600060408201905061171f6000830185611417565b61172c6020830184611417565b9392505050565b60008151905061174281611119565b92915050565b600081519050611757816115d0565b92915050565b600061177061176b846115a4565b6111bb565b9050808382526020820190506020840283018581111561179357611792611202565b5b835b818110156117bc57806117a88882611748565b845260208401935050602081019050611795565b5050509392505050565b600082601f8301126117db576117da611145565b5b81516117eb84826020860161175d565b91505092915050565b6117fd81611426565b811461180857600080fd5b50565b60008151905061181a816117f4565b92915050565b60008060008060008060c0878903121561183d5761183c61110f565b5b600061184b89828a01611733565b965050602061185c89828a01611733565b955050604061186d89828a01611733565b945050606087015167ffffffffffffffff81111561188e5761188d611114565b5b61189a89828a016117c6565b93505060806118ab89828a01611748565b92505060a06118bc89828a0161180b565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611903826110d1565b915061190e836110d1565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611943576119426118c9565b5b828201905092915050565b600060608201905061196360008301866110db565b61197060208301856110db565b61197d6040830184611417565b949350505050565b600060608201905061199a60008301866110db565b6119a76020830185611417565b6119b460408301846110db565b949350505050565b60006119cf6119ca846111d6565b6111bb565b905080838252602082019050602084028301858111156119f2576119f1611202565b5b835b81811015611a1b5780611a078882611733565b8452602084019350506020810190506119f4565b5050509392505050565b600082601f830112611a3a57611a39611145565b5b8151611a4a8482602086016119bc565b91505092915050565b600060208284031215611a6957611a6861110f565b5b600082015167ffffffffffffffff811115611a8757611a86611114565b5b611a9384828501611a25565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000611ad6826110d1565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611b0957611b086118c9565b5b600182019050919050565b600060208284031215611b2a57611b2961110f565b5b6000611b388482850161180b565b91505092915050565b600060208284031215611b5757611b5661110f565b5b600082015167ffffffffffffffff811115611b7557611b74611114565b5b611b81848285016117c6565b91505092915050565b6000819050919050565b6000819050919050565b6000611bb9611bb4611baf84611b8a565b611b94565b6110d1565b9050919050565b611bc981611b9e565b82525050565b6000604082019050611be460008301856110db565b611bf16020830184611bc0565b9392505050565b6000606082019050611c0d6000830186611bc0565b611c1a60208301856110db565b611c276040830184611417565b949350505050565b6000819050919050565b611c4281611c2f565b82525050565b600067ffffffffffffffff82169050919050565b611c6581611c48565b82525050565b600061ffff82169050919050565b611c8281611c6b565b82525050565b600063ffffffff82169050919050565b611ca181611c88565b82525050565b6000819050919050565b6000611ccc611cc7611cc284611ca7565b611b94565b611c88565b9050919050565b611cdc81611cb1565b82525050565b600060a082019050611cf76000830188611c39565b611d046020830187611c5c565b611d116040830186611c79565b611d1e6060830185611c98565b611d2b6080830184611cd3565b9695505050505050565b600060208284031215611d4b57611d4a61110f565b5b6000611d5984828501611733565b91505092915050565b6000604082019050611d7760008301856110db565b611d8460208301846110db565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611dc5826110d1565b9150611dd0836110d1565b925082611de057611ddf611d8b565b5b82820690509291505056fea2646970667358221220485d39639b0f1b31c8aea79e6571ff92726491488351a301aa61dff0bea4250f64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 640,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "COORDINATOR",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(VRFCoordinatorV2Interface)241"
      },
      {
        "astId": 643,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "LINKTOKEN",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(LinkTokenInterface)152"
      },
      {
        "astId": 646,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "LOTTERY_DATA",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LotteryData)1481"
      },
      {
        "astId": 656,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryId",
        "offset": 0,
        "slot": "3",
        "type": "t_struct(Counter)247_storage"
      },
      {
        "astId": 659,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "totalAllowedPlayers",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 661,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryManager",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 665,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "lotteryRandomnessRequest",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 667,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "keyHash",
        "offset": 0,
        "slot": "7",
        "type": "t_bytes32"
      },
      {
        "astId": 677,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_requestId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(LinkTokenInterface)152": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LotteryData)1481": {
        "encoding": "inplace",
        "label": "contract LotteryData",
        "numberOfBytes": "20"
      },
      "t_contract(VRFCoordinatorV2Interface)241": {
        "encoding": "inplace",
        "label": "contract VRFCoordinatorV2Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Counter)247_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 246,
            "contract": "contracts/Lottery.sol:Lottery",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}